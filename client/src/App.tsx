import { useEffect, useState } from 'react';
import { io, Socket } from 'socket.io-client';

const socket: Socket = io('ws://localhost:3000'); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö backend websocket

interface GameResult {
  myChoice: string;
  opponentChoice: string;
  winnerText: string;
}

function App() {
  const [status, setStatus] = useState('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');
  const [result, setResult] = useState<GameResult | null>(null);
  const [selected, setSelected] = useState<string>('');

  useEffect(() => {
    socket.on('connect', () => {
      setStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô...');
    });

    socket.on('waiting', (msg: string) => {
      setStatus(msg);
    });

    socket.on('start', (msg: string) => {
      setStatus(msg);
      setResult(null); // reset ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
    });

    socket.on('result', (data: { choices: Record<string, string>; winner: string }) => {
      const myId = socket.id!;
      const myChoice = data.choices[myId];
      const opponentId = Object.keys(data.choices).find((id) => id !== myId) || '';
      const opponentChoice = data.choices[opponentId];

      const winnerText =
        data.winner === 'draw'
          ? '‡πÄ‡∏™‡∏°‡∏≠‡∏Å‡∏±‡∏ô!'
          : data.winner === myId
          ? '‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!'
          : '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ üò¢';

      setResult({
        myChoice,
        opponentChoice,
        winnerText,
      });

      setStatus('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    });

    return () => {
      socket.off('waiting');
      socket.off('start');
      socket.off('result');
    };
  }, []);

  const sendChoice = (choice: string) => {
    setSelected(choice);
    socket.emit('choice', choice);
    setStatus('‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å...');
  };

  return (
    <div style={{ padding: '20px', fontFamily: 'sans-serif', textAlign: 'center' }}>
      <h1>‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡πâ‡∏á‡∏â‡∏∏‡∏ö ü™®üìÑ‚úÇÔ∏è</h1>
      <p>{status}</p>
      {/* <p>{selected}</p> */}

      <div style={{ marginBottom: '20px' }}>
        <button onClick={() => sendChoice('rock')}>‚úä ‡∏Ñ‡πâ‡∏≠‡∏ô</button>{' '}
        <button onClick={() => sendChoice('paper')}>‚úã ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©</button>{' '}
        <button onClick={() => sendChoice('scissors')}>‚úåÔ∏è ‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£</button>
      </div>

      {result && (
        <div>
          <p>‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: <strong>{result.myChoice}</strong></p>
          <p>‡∏≠‡∏µ‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: <strong>{result.opponentChoice}</strong></p>
          <h2>{result.winnerText}</h2>
        </div>
      )}
    </div>
  );
}

export default App;
